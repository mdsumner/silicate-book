bookdown::publish_book()
bookdown::publish_book(name = "mdsumner")
bookdown::publish_book(account = "mdsumner")
bookdown::publish_book(render = "local")
library(silicate)
str(minimal_mesh$geom)
sc_coord(minimal_mesh)
sc_path(minimal_mesh)
sc_object(minimal_mesh)
library(silicate)
str(minimal_mesh$geom)
sc_coord(minimal_mesh)
sc_path(minimal_mesh)
sc_object(minimal_mesh)
path <- sc_path(minimal_mesh)
coord <- sc_coord(minimal_mesh)
plot(coord)
lapply(split(seq_len(sum(path$ncoords_)), rep(path$path, path$ncoords_)),
function(i) polygon(sc_coord(minimal_mesh)[i, ]))
rbind_na <- function(x) {
head(do.call(rbind, lapply(x, function(a) rbind(a, NA))), -1)
}
coord$object <- rep(path$object,  path$ncoords_)
coord$path <- rep(path$path, path$ncoords_)
plot(coord[, 1:2])
for (i in seq_along(unique(path$object))) {
asub <- unique(path$object)[i] == coord$object
polypath(rbind_na(split(coord[asub, ], coord[asub, ]$path)), col = "grey")
}
## clearly we have to be very careful with this as SF pointedly
## doesn't care about ring orientation
as_list_xy <- function(x, orient = 1) {
x <- if(orient == 1) x else x[nrow(x):1, ]
list(x = x$x_, y = x$y_)
}
library(spatstat)
lc <- split(coord, coord$path)
## why does this need non zero but the next example needs > 0?
ow <- owin(poly = lapply(seq_along(lc), function(a) as_list_xy(lc[[a]], orient = 0)))
plot(ow, col = "red")
data("inlandwaters", package = "silicate")
as_owin_sf <- function(x) {
coord <- sc_coord(x)
path <- sc_path(x)
coord$object <- rep(path$object,  path$ncoords_)
coord$path <- rep(path$path, path$ncoords_)
lc <- split(coord, coord$path)
ow <- owin(poly = lapply(seq_along(lc), function(a) as_list_xy(lc[[a]], orient = a > 1)))
ow
}
library(sf)
ow <- as_owin_sf(inlandwaters[4, ])
plot(ow, col = "firebrick")
ow <- as_owin_sf(inlandwaters[3:4, ])
plot(ow, col = "dodgerblue")
as_rgl_sf <- function(x) {
coord <- sc_coord(x)
path <- sc_path(x)
coord$object <- rep(path$object,  path$ncoords_)
coord$path <- rep(path$path, path$ncoords_)
lc <- split(coord, coord$path)
## drop the closing coord
lapply(seq_along(lc), function(a) c(as_list_xy(head(lc[[a]], -1)), list(z = 0)))
}
library(rgl)
## todo apply per feature to avoid problems
outlines <- as_rgl_sf(minimal_mesh[1, ])
lapply(outlines, lines3d)
rglwidget()
library(tibble)
tab <- rbind_na(lapply(outlines, as_tibble))
wg <- rgl::triangulate(tab$x, tab$y)
rgl.clear()
rgl.triangles(cbind(tab$x, tab$y, 0)[c(wg), ])
rgl.lines(cbind(tab$x, tab$y, 0)[c(wg), ])
rglwidget()
library(sfdct)
library(silicate)
tri1 <- ct_triangulate(minimal_mesh)
tri2 <- ct_triangulate(minimal_mesh, D = TRUE)
plot(st_geometry(tri1), col = NA)
plot(st_geometry(tri2), col = NA)
?triangulate
?RTriangle::triangulate
library(sfdct)
library(silicate)
tri1 <- ct_triangulate(minimal_mesh)
tri2 <- ct_triangulate(minimal_mesh, D = TRUE)
tri3 <- ct_triangulate(minimal_mesh, D = TRUE, Y = TRUE)
plot(st_geometry(tri1), col = NA)
plot(st_geometry(tri2), col = NA)
plot(st_geometry, tri3, col = NA)
library(sfdct)
library(silicate)
tri1 <- ct_triangulate(minimal_mesh)
tri2 <- ct_triangulate(minimal_mesh, D = TRUE)
tri3 <- ct_triangulate(minimal_mesh, D = TRUE, Y = TRUE)
plot(st_geometry(tri1), col = NA)
plot(st_geometry(tri2), col = NA)
plot(st_geometry( tri3), col = NA)
P <- PRIMITIVE(minimal_mesh)
P
